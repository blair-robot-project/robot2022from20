plugins {
    id 'java'
    id 'idea'
    id "edu.wpi.first.GradleRIO" version "2022.1.1"
}

def ROBOT_MAIN_CLASS = "frc.team449.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(449)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

//// Define my targets (RoboRIO) and artifacts (deployable files)
//// This is added by GradleRIO's backing project EmbeddedTools.
//deploy {
//    targets {
//        roboRIO("roborio") {
//            // Team number is loaded either from the .wpilib/wpilib_preferences.json
//            // or from command line. If not found an exception will be thrown.
//            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
//            // want to store a team number in this file.
//            team = frc.getTeamOrDefault(449)
//        }
//    }
//    artifacts {
//        frcJavaArtifact('frcJava') {
//            targets << "roborio"
//            // Debug can be overridden by command line, for use with VSCode
//            debug = frc.getDebugOrDefault(false)
//        }
//        // Built in artifact to deploy arbitrary files to the roboRIO.
//        fileTreeArtifact('frcStaticFileDeploy') {
//            // The directory below is the local directory to deploy
//            files = fileTree(dir: 'src/main/deploy')
//            // Deploy to RoboRIO target, into /home/lvuser/deploy
//            targets << "roborio"
//            directory = '/home/lvuser/deploy'
//        }
//    }
//}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {

    implementation group: 'com.google.guava', name: 'guava', version: '31.0-jre'

    def jacksonVersion = '2.12.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: jacksonVersion

    compileOnly 'org.jetbrains:annotations:22.0.0'

    implementation 'com.github.Oblarg:Oblog:3.1.2'

    implementation 'com.revrobotics.frc:SparkMax-java:1.5.4'

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

//    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
//    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)
//
//    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
//    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)
//
//    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
//    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
//    simulationDebug wpi.sim.enableDebug()
//
//    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
//    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
//    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.13.2'
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

// Simulation configuration (e.g. environment variables).
// Sets the websocket client remote host.
// wpi.sim.envVar("HALSIMWS_HOST", "10.0.0.2")


// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

wrapper {
    gradleVersion = '7.3.2'
    distributionType = Wrapper.DistributionType.BIN
}

compileJava.options.compilerArgs.add '-parameters'
compileJava.options.compilerArgs.add '-Xlint'
